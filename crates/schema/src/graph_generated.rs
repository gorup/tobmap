// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[allow(unused_imports, dead_code)]
pub mod tobmapgraph {

  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};

#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_ROAD_INTERACTION: i8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_ROAD_INTERACTION: i8 = 3;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_ROAD_INTERACTION: [RoadInteraction; 4] = [
  RoadInteraction::None,
  RoadInteraction::Yield,
  RoadInteraction::StopSign,
  RoadInteraction::TrafficLight,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct RoadInteraction(pub i8);
#[allow(non_upper_case_globals)]
impl RoadInteraction {
  pub const None: Self = Self(0);
  pub const Yield: Self = Self(1);
  pub const StopSign: Self = Self(2);
  pub const TrafficLight: Self = Self(3);

  pub const ENUM_MIN: i8 = 0;
  pub const ENUM_MAX: i8 = 3;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::None,
    Self::Yield,
    Self::StopSign,
    Self::TrafficLight,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::None => Some("None"),
      Self::Yield => Some("Yield"),
      Self::StopSign => Some("StopSign"),
      Self::TrafficLight => Some("TrafficLight"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for RoadInteraction {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for RoadInteraction {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i8>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for RoadInteraction {
    type Output = RoadInteraction;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i8>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for RoadInteraction {
  type Scalar = i8;
  #[inline]
  fn to_little_endian(self) -> i8 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i8) -> Self {
    let b = i8::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for RoadInteraction {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for RoadInteraction {}
// struct Interactions, aligned to 1
#[repr(transparent)]
#[derive(Clone, Copy, PartialEq)]
pub struct Interactions(pub [u8; 2]);
impl Default for Interactions { 
  fn default() -> Self { 
    Self([0; 2])
  }
}
impl core::fmt::Debug for Interactions {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    f.debug_struct("Interactions")
      .field("incoming", &self.incoming())
      .field("outgoing", &self.outgoing())
      .finish()
  }
}

impl flatbuffers::SimpleToVerifyInSlice for Interactions {}
impl<'a> flatbuffers::Follow<'a> for Interactions {
  type Inner = &'a Interactions;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    <&'a Interactions>::follow(buf, loc)
  }
}
impl<'a> flatbuffers::Follow<'a> for &'a Interactions {
  type Inner = &'a Interactions;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    flatbuffers::follow_cast_ref::<Interactions>(buf, loc)
  }
}
impl<'b> flatbuffers::Push for Interactions {
    type Output = Interactions;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        let src = ::core::slice::from_raw_parts(self as *const Interactions as *const u8, <Self as flatbuffers::Push>::size());
        dst.copy_from_slice(src);
    }
    #[inline]
    fn alignment() -> flatbuffers::PushAlignment {
        flatbuffers::PushAlignment::new(1)
    }
}

impl<'a> flatbuffers::Verifiable for Interactions {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.in_buffer::<Self>(pos)
  }
}

impl<'a> Interactions {
  #[allow(clippy::too_many_arguments)]
  pub fn new(
    incoming: RoadInteraction,
    outgoing: RoadInteraction,
  ) -> Self {
    let mut s = Self([0; 2]);
    s.set_incoming(incoming);
    s.set_outgoing(outgoing);
    s
  }

  pub fn incoming(&self) -> RoadInteraction {
    let mut mem = core::mem::MaybeUninit::<<RoadInteraction as EndianScalar>::Scalar>::uninit();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    EndianScalar::from_little_endian(unsafe {
      core::ptr::copy_nonoverlapping(
        self.0[0..].as_ptr(),
        mem.as_mut_ptr() as *mut u8,
        core::mem::size_of::<<RoadInteraction as EndianScalar>::Scalar>(),
      );
      mem.assume_init()
    })
  }

  pub fn set_incoming(&mut self, x: RoadInteraction) {
    let x_le = x.to_little_endian();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    unsafe {
      core::ptr::copy_nonoverlapping(
        &x_le as *const _ as *const u8,
        self.0[0..].as_mut_ptr(),
        core::mem::size_of::<<RoadInteraction as EndianScalar>::Scalar>(),
      );
    }
  }

  pub fn outgoing(&self) -> RoadInteraction {
    let mut mem = core::mem::MaybeUninit::<<RoadInteraction as EndianScalar>::Scalar>::uninit();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    EndianScalar::from_little_endian(unsafe {
      core::ptr::copy_nonoverlapping(
        self.0[1..].as_ptr(),
        mem.as_mut_ptr() as *mut u8,
        core::mem::size_of::<<RoadInteraction as EndianScalar>::Scalar>(),
      );
      mem.assume_init()
    })
  }

  pub fn set_outgoing(&mut self, x: RoadInteraction) {
    let x_le = x.to_little_endian();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    unsafe {
      core::ptr::copy_nonoverlapping(
        &x_le as *const _ as *const u8,
        self.0[1..].as_mut_ptr(),
        core::mem::size_of::<<RoadInteraction as EndianScalar>::Scalar>(),
      );
    }
  }

}

// struct Edge, aligned to 4
#[repr(transparent)]
#[derive(Clone, Copy, PartialEq)]
pub struct Edge(pub [u8; 12]);
impl Default for Edge { 
  fn default() -> Self { 
    Self([0; 12])
  }
}
impl core::fmt::Debug for Edge {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    f.debug_struct("Edge")
      .field("point_1_node_idx", &self.point_1_node_idx())
      .field("point_2_node_idx", &self.point_2_node_idx())
      .field("costs_and_flags", &self.costs_and_flags())
      .finish()
  }
}

impl flatbuffers::SimpleToVerifyInSlice for Edge {}
impl<'a> flatbuffers::Follow<'a> for Edge {
  type Inner = &'a Edge;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    <&'a Edge>::follow(buf, loc)
  }
}
impl<'a> flatbuffers::Follow<'a> for &'a Edge {
  type Inner = &'a Edge;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    flatbuffers::follow_cast_ref::<Edge>(buf, loc)
  }
}
impl<'b> flatbuffers::Push for Edge {
    type Output = Edge;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        let src = ::core::slice::from_raw_parts(self as *const Edge as *const u8, <Self as flatbuffers::Push>::size());
        dst.copy_from_slice(src);
    }
    #[inline]
    fn alignment() -> flatbuffers::PushAlignment {
        flatbuffers::PushAlignment::new(4)
    }
}

impl<'a> flatbuffers::Verifiable for Edge {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.in_buffer::<Self>(pos)
  }
}

impl<'a> Edge {
  #[allow(clippy::too_many_arguments)]
  pub fn new(
    point_1_node_idx: u32,
    point_2_node_idx: u32,
    costs_and_flags: u16,
  ) -> Self {
    let mut s = Self([0; 12]);
    s.set_point_1_node_idx(point_1_node_idx);
    s.set_point_2_node_idx(point_2_node_idx);
    s.set_costs_and_flags(costs_and_flags);
    s
  }

  pub fn point_1_node_idx(&self) -> u32 {
    let mut mem = core::mem::MaybeUninit::<<u32 as EndianScalar>::Scalar>::uninit();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    EndianScalar::from_little_endian(unsafe {
      core::ptr::copy_nonoverlapping(
        self.0[0..].as_ptr(),
        mem.as_mut_ptr() as *mut u8,
        core::mem::size_of::<<u32 as EndianScalar>::Scalar>(),
      );
      mem.assume_init()
    })
  }

  pub fn set_point_1_node_idx(&mut self, x: u32) {
    let x_le = x.to_little_endian();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    unsafe {
      core::ptr::copy_nonoverlapping(
        &x_le as *const _ as *const u8,
        self.0[0..].as_mut_ptr(),
        core::mem::size_of::<<u32 as EndianScalar>::Scalar>(),
      );
    }
  }

  pub fn point_2_node_idx(&self) -> u32 {
    let mut mem = core::mem::MaybeUninit::<<u32 as EndianScalar>::Scalar>::uninit();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    EndianScalar::from_little_endian(unsafe {
      core::ptr::copy_nonoverlapping(
        self.0[4..].as_ptr(),
        mem.as_mut_ptr() as *mut u8,
        core::mem::size_of::<<u32 as EndianScalar>::Scalar>(),
      );
      mem.assume_init()
    })
  }

  pub fn set_point_2_node_idx(&mut self, x: u32) {
    let x_le = x.to_little_endian();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    unsafe {
      core::ptr::copy_nonoverlapping(
        &x_le as *const _ as *const u8,
        self.0[4..].as_mut_ptr(),
        core::mem::size_of::<<u32 as EndianScalar>::Scalar>(),
      );
    }
  }

  pub fn costs_and_flags(&self) -> u16 {
    let mut mem = core::mem::MaybeUninit::<<u16 as EndianScalar>::Scalar>::uninit();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    EndianScalar::from_little_endian(unsafe {
      core::ptr::copy_nonoverlapping(
        self.0[8..].as_ptr(),
        mem.as_mut_ptr() as *mut u8,
        core::mem::size_of::<<u16 as EndianScalar>::Scalar>(),
      );
      mem.assume_init()
    })
  }

  pub fn set_costs_and_flags(&mut self, x: u16) {
    let x_le = x.to_little_endian();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    unsafe {
      core::ptr::copy_nonoverlapping(
        &x_le as *const _ as *const u8,
        self.0[8..].as_mut_ptr(),
        core::mem::size_of::<<u16 as EndianScalar>::Scalar>(),
      );
    }
  }

}

pub enum NodeOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct Node<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Node<'a> {
  type Inner = Node<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> Node<'a> {
  pub const VT_EDGES: flatbuffers::VOffsetT = 4;
  pub const VT_INTERACTIONS: flatbuffers::VOffsetT = 6;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    Node { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args NodeArgs<'args>
  ) -> flatbuffers::WIPOffset<Node<'bldr>> {
    let mut builder = NodeBuilder::new(_fbb);
    if let Some(x) = args.interactions { builder.add_interactions(x); }
    if let Some(x) = args.edges { builder.add_edges(x); }
    builder.finish()
  }


  #[inline]
  pub fn edges(&self) -> Option<flatbuffers::Vector<'a, u32>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u32>>>(Node::VT_EDGES, None)}
  }
  #[inline]
  pub fn interactions(&self) -> Option<flatbuffers::Vector<'a, Interactions>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, Interactions>>>(Node::VT_INTERACTIONS, None)}
  }
}

impl flatbuffers::Verifiable for Node<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u32>>>("edges", Self::VT_EDGES, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, Interactions>>>("interactions", Self::VT_INTERACTIONS, false)?
     .finish();
    Ok(())
  }
}
pub struct NodeArgs<'a> {
    pub edges: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u32>>>,
    pub interactions: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, Interactions>>>,
}
impl<'a> Default for NodeArgs<'a> {
  #[inline]
  fn default() -> Self {
    NodeArgs {
      edges: None,
      interactions: None,
    }
  }
}

pub struct NodeBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> NodeBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_edges(&mut self, edges: flatbuffers::WIPOffset<flatbuffers::Vector<'b , u32>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Node::VT_EDGES, edges);
  }
  #[inline]
  pub fn add_interactions(&mut self, interactions: flatbuffers::WIPOffset<flatbuffers::Vector<'b , Interactions>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Node::VT_INTERACTIONS, interactions);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> NodeBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    NodeBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Node<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for Node<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("Node");
      ds.field("edges", &self.edges());
      ds.field("interactions", &self.interactions());
      ds.finish()
  }
}
pub enum GraphBlobOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct GraphBlob<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for GraphBlob<'a> {
  type Inner = GraphBlob<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> GraphBlob<'a> {
  pub const VT_NAME: flatbuffers::VOffsetT = 4;
  pub const VT_EDGES: flatbuffers::VOffsetT = 6;
  pub const VT_NODES: flatbuffers::VOffsetT = 8;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    GraphBlob { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args GraphBlobArgs<'args>
  ) -> flatbuffers::WIPOffset<GraphBlob<'bldr>> {
    let mut builder = GraphBlobBuilder::new(_fbb);
    if let Some(x) = args.nodes { builder.add_nodes(x); }
    if let Some(x) = args.edges { builder.add_edges(x); }
    if let Some(x) = args.name { builder.add_name(x); }
    builder.finish()
  }


  #[inline]
  pub fn name(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(GraphBlob::VT_NAME, None)}
  }
  #[inline]
  pub fn edges(&self) -> Option<flatbuffers::Vector<'a, Edge>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, Edge>>>(GraphBlob::VT_EDGES, None)}
  }
  #[inline]
  pub fn nodes(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Node<'a>>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Node>>>>(GraphBlob::VT_NODES, None)}
  }
}

impl flatbuffers::Verifiable for GraphBlob<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("name", Self::VT_NAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, Edge>>>("edges", Self::VT_EDGES, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<Node>>>>("nodes", Self::VT_NODES, false)?
     .finish();
    Ok(())
  }
}
pub struct GraphBlobArgs<'a> {
    pub name: Option<flatbuffers::WIPOffset<&'a str>>,
    pub edges: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, Edge>>>,
    pub nodes: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Node<'a>>>>>,
}
impl<'a> Default for GraphBlobArgs<'a> {
  #[inline]
  fn default() -> Self {
    GraphBlobArgs {
      name: None,
      edges: None,
      nodes: None,
    }
  }
}

pub struct GraphBlobBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> GraphBlobBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_name(&mut self, name: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(GraphBlob::VT_NAME, name);
  }
  #[inline]
  pub fn add_edges(&mut self, edges: flatbuffers::WIPOffset<flatbuffers::Vector<'b , Edge>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(GraphBlob::VT_EDGES, edges);
  }
  #[inline]
  pub fn add_nodes(&mut self, nodes: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<Node<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(GraphBlob::VT_NODES, nodes);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> GraphBlobBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    GraphBlobBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<GraphBlob<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for GraphBlob<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("GraphBlob");
      ds.field("name", &self.name());
      ds.field("edges", &self.edges());
      ds.field("nodes", &self.nodes());
      ds.finish()
  }
}
pub enum EdgeLocationItemsOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct EdgeLocationItems<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for EdgeLocationItems<'a> {
  type Inner = EdgeLocationItems<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> EdgeLocationItems<'a> {
  pub const VT_POINTS: flatbuffers::VOffsetT = 4;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    EdgeLocationItems { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args EdgeLocationItemsArgs<'args>
  ) -> flatbuffers::WIPOffset<EdgeLocationItems<'bldr>> {
    let mut builder = EdgeLocationItemsBuilder::new(_fbb);
    if let Some(x) = args.points { builder.add_points(x); }
    builder.finish()
  }


  #[inline]
  pub fn points(&self) -> Option<flatbuffers::Vector<'a, u64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u64>>>(EdgeLocationItems::VT_POINTS, None)}
  }
}

impl flatbuffers::Verifiable for EdgeLocationItems<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u64>>>("points", Self::VT_POINTS, false)?
     .finish();
    Ok(())
  }
}
pub struct EdgeLocationItemsArgs<'a> {
    pub points: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u64>>>,
}
impl<'a> Default for EdgeLocationItemsArgs<'a> {
  #[inline]
  fn default() -> Self {
    EdgeLocationItemsArgs {
      points: None,
    }
  }
}

pub struct EdgeLocationItemsBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> EdgeLocationItemsBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_points(&mut self, points: flatbuffers::WIPOffset<flatbuffers::Vector<'b , u64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EdgeLocationItems::VT_POINTS, points);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> EdgeLocationItemsBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    EdgeLocationItemsBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<EdgeLocationItems<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for EdgeLocationItems<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("EdgeLocationItems");
      ds.field("points", &self.points());
      ds.finish()
  }
}
pub enum NodeLocationItemsOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct NodeLocationItems<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for NodeLocationItems<'a> {
  type Inner = NodeLocationItems<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> NodeLocationItems<'a> {
  pub const VT_CELL_ID: flatbuffers::VOffsetT = 4;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    NodeLocationItems { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args NodeLocationItemsArgs
  ) -> flatbuffers::WIPOffset<NodeLocationItems<'bldr>> {
    let mut builder = NodeLocationItemsBuilder::new(_fbb);
    builder.add_cell_id(args.cell_id);
    builder.finish()
  }


  #[inline]
  pub fn cell_id(&self) -> u64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u64>(NodeLocationItems::VT_CELL_ID, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for NodeLocationItems<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<u64>("cell_id", Self::VT_CELL_ID, false)?
     .finish();
    Ok(())
  }
}
pub struct NodeLocationItemsArgs {
    pub cell_id: u64,
}
impl<'a> Default for NodeLocationItemsArgs {
  #[inline]
  fn default() -> Self {
    NodeLocationItemsArgs {
      cell_id: 0,
    }
  }
}

pub struct NodeLocationItemsBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> NodeLocationItemsBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_cell_id(&mut self, cell_id: u64) {
    self.fbb_.push_slot::<u64>(NodeLocationItems::VT_CELL_ID, cell_id, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> NodeLocationItemsBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    NodeLocationItemsBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<NodeLocationItems<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for NodeLocationItems<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("NodeLocationItems");
      ds.field("cell_id", &self.cell_id());
      ds.finish()
  }
}
pub enum LocationBlobOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct LocationBlob<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for LocationBlob<'a> {
  type Inner = LocationBlob<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> LocationBlob<'a> {
  pub const VT_EDGE_LOCATION_ITEMS: flatbuffers::VOffsetT = 4;
  pub const VT_NODE_LOCATION_ITEMS: flatbuffers::VOffsetT = 6;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    LocationBlob { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args LocationBlobArgs<'args>
  ) -> flatbuffers::WIPOffset<LocationBlob<'bldr>> {
    let mut builder = LocationBlobBuilder::new(_fbb);
    if let Some(x) = args.node_location_items { builder.add_node_location_items(x); }
    if let Some(x) = args.edge_location_items { builder.add_edge_location_items(x); }
    builder.finish()
  }


  #[inline]
  pub fn edge_location_items(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<EdgeLocationItems<'a>>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<EdgeLocationItems>>>>(LocationBlob::VT_EDGE_LOCATION_ITEMS, None)}
  }
  #[inline]
  pub fn node_location_items(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<NodeLocationItems<'a>>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<NodeLocationItems>>>>(LocationBlob::VT_NODE_LOCATION_ITEMS, None)}
  }
}

impl flatbuffers::Verifiable for LocationBlob<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<EdgeLocationItems>>>>("edge_location_items", Self::VT_EDGE_LOCATION_ITEMS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<NodeLocationItems>>>>("node_location_items", Self::VT_NODE_LOCATION_ITEMS, false)?
     .finish();
    Ok(())
  }
}
pub struct LocationBlobArgs<'a> {
    pub edge_location_items: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<EdgeLocationItems<'a>>>>>,
    pub node_location_items: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<NodeLocationItems<'a>>>>>,
}
impl<'a> Default for LocationBlobArgs<'a> {
  #[inline]
  fn default() -> Self {
    LocationBlobArgs {
      edge_location_items: None,
      node_location_items: None,
    }
  }
}

pub struct LocationBlobBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> LocationBlobBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_edge_location_items(&mut self, edge_location_items: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<EdgeLocationItems<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocationBlob::VT_EDGE_LOCATION_ITEMS, edge_location_items);
  }
  #[inline]
  pub fn add_node_location_items(&mut self, node_location_items: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<NodeLocationItems<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocationBlob::VT_NODE_LOCATION_ITEMS, node_location_items);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> LocationBlobBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    LocationBlobBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<LocationBlob<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for LocationBlob<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("LocationBlob");
      ds.field("edge_location_items", &self.edge_location_items());
      ds.field("node_location_items", &self.node_location_items());
      ds.finish()
  }
}
pub enum DescriptionBlobOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct DescriptionBlob<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for DescriptionBlob<'a> {
  type Inner = DescriptionBlob<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> DescriptionBlob<'a> {
  pub const VT_EDGE_DESCRIPTIONS: flatbuffers::VOffsetT = 4;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    DescriptionBlob { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args DescriptionBlobArgs<'args>
  ) -> flatbuffers::WIPOffset<DescriptionBlob<'bldr>> {
    let mut builder = DescriptionBlobBuilder::new(_fbb);
    if let Some(x) = args.edge_descriptions { builder.add_edge_descriptions(x); }
    builder.finish()
  }


  #[inline]
  pub fn edge_descriptions(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<EdgeDescriptionThings<'a>>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<EdgeDescriptionThings>>>>(DescriptionBlob::VT_EDGE_DESCRIPTIONS, None)}
  }
}

impl flatbuffers::Verifiable for DescriptionBlob<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<EdgeDescriptionThings>>>>("edge_descriptions", Self::VT_EDGE_DESCRIPTIONS, false)?
     .finish();
    Ok(())
  }
}
pub struct DescriptionBlobArgs<'a> {
    pub edge_descriptions: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<EdgeDescriptionThings<'a>>>>>,
}
impl<'a> Default for DescriptionBlobArgs<'a> {
  #[inline]
  fn default() -> Self {
    DescriptionBlobArgs {
      edge_descriptions: None,
    }
  }
}

pub struct DescriptionBlobBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> DescriptionBlobBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_edge_descriptions(&mut self, edge_descriptions: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<EdgeDescriptionThings<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(DescriptionBlob::VT_EDGE_DESCRIPTIONS, edge_descriptions);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> DescriptionBlobBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    DescriptionBlobBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<DescriptionBlob<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for DescriptionBlob<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("DescriptionBlob");
      ds.field("edge_descriptions", &self.edge_descriptions());
      ds.finish()
  }
}
pub enum EdgeDescriptionThingsOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct EdgeDescriptionThings<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for EdgeDescriptionThings<'a> {
  type Inner = EdgeDescriptionThings<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> EdgeDescriptionThings<'a> {
  pub const VT_STREET_NAMES: flatbuffers::VOffsetT = 4;
  pub const VT_PRIORITY: flatbuffers::VOffsetT = 6;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    EdgeDescriptionThings { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args EdgeDescriptionThingsArgs<'args>
  ) -> flatbuffers::WIPOffset<EdgeDescriptionThings<'bldr>> {
    let mut builder = EdgeDescriptionThingsBuilder::new(_fbb);
    if let Some(x) = args.street_names { builder.add_street_names(x); }
    builder.add_priority(args.priority);
    builder.finish()
  }


  #[inline]
  pub fn street_names(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(EdgeDescriptionThings::VT_STREET_NAMES, None)}
  }
  #[inline]
  pub fn priority(&self) -> u8 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u8>(EdgeDescriptionThings::VT_PRIORITY, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for EdgeDescriptionThings<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("street_names", Self::VT_STREET_NAMES, false)?
     .visit_field::<u8>("priority", Self::VT_PRIORITY, false)?
     .finish();
    Ok(())
  }
}
pub struct EdgeDescriptionThingsArgs<'a> {
    pub street_names: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub priority: u8,
}
impl<'a> Default for EdgeDescriptionThingsArgs<'a> {
  #[inline]
  fn default() -> Self {
    EdgeDescriptionThingsArgs {
      street_names: None,
      priority: 0,
    }
  }
}

pub struct EdgeDescriptionThingsBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> EdgeDescriptionThingsBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_street_names(&mut self, street_names: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EdgeDescriptionThings::VT_STREET_NAMES, street_names);
  }
  #[inline]
  pub fn add_priority(&mut self, priority: u8) {
    self.fbb_.push_slot::<u8>(EdgeDescriptionThings::VT_PRIORITY, priority, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> EdgeDescriptionThingsBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    EdgeDescriptionThingsBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<EdgeDescriptionThings<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for EdgeDescriptionThings<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("EdgeDescriptionThings");
      ds.field("street_names", &self.street_names());
      ds.field("priority", &self.priority());
      ds.finish()
  }
}
}  // pub mod tobmapgraph

