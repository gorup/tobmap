// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[allow(unused_imports, dead_code)]
pub mod tobmapgraph {

  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};

#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_TRAVEL_MODE: i8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_TRAVEL_MODE: i8 = 3;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_TRAVEL_MODE: [TravelMode; 4] = [
  TravelMode::Car,
  TravelMode::Bike,
  TravelMode::Walk,
  TravelMode::Transit,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct TravelMode(pub i8);
#[allow(non_upper_case_globals)]
impl TravelMode {
  pub const Car: Self = Self(0);
  pub const Bike: Self = Self(1);
  pub const Walk: Self = Self(2);
  pub const Transit: Self = Self(3);

  pub const ENUM_MIN: i8 = 0;
  pub const ENUM_MAX: i8 = 3;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::Car,
    Self::Bike,
    Self::Walk,
    Self::Transit,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::Car => Some("Car"),
      Self::Bike => Some("Bike"),
      Self::Walk => Some("Walk"),
      Self::Transit => Some("Transit"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for TravelMode {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for TravelMode {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i8>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for TravelMode {
    type Output = TravelMode;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i8>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for TravelMode {
  type Scalar = i8;
  #[inline]
  fn to_little_endian(self) -> i8 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i8) -> Self {
    let b = i8::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for TravelMode {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for TravelMode {}
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_ROAD_INTERACTION: i8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_ROAD_INTERACTION: i8 = 3;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_ROAD_INTERACTION: [RoadInteraction; 4] = [
  RoadInteraction::None,
  RoadInteraction::Yield,
  RoadInteraction::StopSign,
  RoadInteraction::TrafficLight,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct RoadInteraction(pub i8);
#[allow(non_upper_case_globals)]
impl RoadInteraction {
  pub const None: Self = Self(0);
  pub const Yield: Self = Self(1);
  pub const StopSign: Self = Self(2);
  pub const TrafficLight: Self = Self(3);

  pub const ENUM_MIN: i8 = 0;
  pub const ENUM_MAX: i8 = 3;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::None,
    Self::Yield,
    Self::StopSign,
    Self::TrafficLight,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::None => Some("None"),
      Self::Yield => Some("Yield"),
      Self::StopSign => Some("StopSign"),
      Self::TrafficLight => Some("TrafficLight"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for RoadInteraction {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for RoadInteraction {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i8>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for RoadInteraction {
    type Output = RoadInteraction;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i8>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for RoadInteraction {
  type Scalar = i8;
  #[inline]
  fn to_little_endian(self) -> i8 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i8) -> Self {
    let b = i8::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for RoadInteraction {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for RoadInteraction {}
pub enum NodeOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct Node<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Node<'a> {
  type Inner = Node<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> Node<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_S2_CELL_ID: flatbuffers::VOffsetT = 6;
  pub const VT_INCOMING_EDGES: flatbuffers::VOffsetT = 8;
  pub const VT_INCOMING_ROAD_INTERACTIONS: flatbuffers::VOffsetT = 10;
  pub const VT_OUTGOING_EDGES: flatbuffers::VOffsetT = 12;
  pub const VT_OUTGOING_ROAD_INTERACTIONS: flatbuffers::VOffsetT = 14;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    Node { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args NodeArgs<'args>
  ) -> flatbuffers::WIPOffset<Node<'bldr>> {
    let mut builder = NodeBuilder::new(_fbb);
    builder.add_s2_cell_id(args.s2_cell_id);
    builder.add_id(args.id);
    if let Some(x) = args.outgoing_road_interactions { builder.add_outgoing_road_interactions(x); }
    if let Some(x) = args.outgoing_edges { builder.add_outgoing_edges(x); }
    if let Some(x) = args.incoming_road_interactions { builder.add_incoming_road_interactions(x); }
    if let Some(x) = args.incoming_edges { builder.add_incoming_edges(x); }
    builder.finish()
  }


  #[inline]
  pub fn id(&self) -> u64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u64>(Node::VT_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn s2_cell_id(&self) -> u64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u64>(Node::VT_S2_CELL_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn incoming_edges(&self) -> Option<flatbuffers::Vector<'a, u64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u64>>>(Node::VT_INCOMING_EDGES, None)}
  }
  #[inline]
  pub fn incoming_road_interactions(&self) -> Option<flatbuffers::Vector<'a, RoadInteraction>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, RoadInteraction>>>(Node::VT_INCOMING_ROAD_INTERACTIONS, None)}
  }
  #[inline]
  pub fn outgoing_edges(&self) -> Option<flatbuffers::Vector<'a, u64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u64>>>(Node::VT_OUTGOING_EDGES, None)}
  }
  #[inline]
  pub fn outgoing_road_interactions(&self) -> Option<flatbuffers::Vector<'a, RoadInteraction>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, RoadInteraction>>>(Node::VT_OUTGOING_ROAD_INTERACTIONS, None)}
  }
}

impl flatbuffers::Verifiable for Node<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<u64>("id", Self::VT_ID, false)?
     .visit_field::<u64>("s2_cell_id", Self::VT_S2_CELL_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u64>>>("incoming_edges", Self::VT_INCOMING_EDGES, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, RoadInteraction>>>("incoming_road_interactions", Self::VT_INCOMING_ROAD_INTERACTIONS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u64>>>("outgoing_edges", Self::VT_OUTGOING_EDGES, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, RoadInteraction>>>("outgoing_road_interactions", Self::VT_OUTGOING_ROAD_INTERACTIONS, false)?
     .finish();
    Ok(())
  }
}
pub struct NodeArgs<'a> {
    pub id: u64,
    pub s2_cell_id: u64,
    pub incoming_edges: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u64>>>,
    pub incoming_road_interactions: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, RoadInteraction>>>,
    pub outgoing_edges: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u64>>>,
    pub outgoing_road_interactions: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, RoadInteraction>>>,
}
impl<'a> Default for NodeArgs<'a> {
  #[inline]
  fn default() -> Self {
    NodeArgs {
      id: 0,
      s2_cell_id: 0,
      incoming_edges: None,
      incoming_road_interactions: None,
      outgoing_edges: None,
      outgoing_road_interactions: None,
    }
  }
}

pub struct NodeBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> NodeBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_id(&mut self, id: u64) {
    self.fbb_.push_slot::<u64>(Node::VT_ID, id, 0);
  }
  #[inline]
  pub fn add_s2_cell_id(&mut self, s2_cell_id: u64) {
    self.fbb_.push_slot::<u64>(Node::VT_S2_CELL_ID, s2_cell_id, 0);
  }
  #[inline]
  pub fn add_incoming_edges(&mut self, incoming_edges: flatbuffers::WIPOffset<flatbuffers::Vector<'b , u64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Node::VT_INCOMING_EDGES, incoming_edges);
  }
  #[inline]
  pub fn add_incoming_road_interactions(&mut self, incoming_road_interactions: flatbuffers::WIPOffset<flatbuffers::Vector<'b , RoadInteraction>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Node::VT_INCOMING_ROAD_INTERACTIONS, incoming_road_interactions);
  }
  #[inline]
  pub fn add_outgoing_edges(&mut self, outgoing_edges: flatbuffers::WIPOffset<flatbuffers::Vector<'b , u64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Node::VT_OUTGOING_EDGES, outgoing_edges);
  }
  #[inline]
  pub fn add_outgoing_road_interactions(&mut self, outgoing_road_interactions: flatbuffers::WIPOffset<flatbuffers::Vector<'b , RoadInteraction>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Node::VT_OUTGOING_ROAD_INTERACTIONS, outgoing_road_interactions);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> NodeBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    NodeBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Node<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for Node<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("Node");
      ds.field("id", &self.id());
      ds.field("s2_cell_id", &self.s2_cell_id());
      ds.field("incoming_edges", &self.incoming_edges());
      ds.field("incoming_road_interactions", &self.incoming_road_interactions());
      ds.field("outgoing_edges", &self.outgoing_edges());
      ds.field("outgoing_road_interactions", &self.outgoing_road_interactions());
      ds.finish()
  }
}
pub enum EdgeOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct Edge<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Edge<'a> {
  type Inner = Edge<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> Edge<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_SOURCE_NODE_ID: flatbuffers::VOffsetT = 6;
  pub const VT_DESTINATION_NODE_ID: flatbuffers::VOffsetT = 8;
  pub const VT_TRAVEL_COSTS: flatbuffers::VOffsetT = 10;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    Edge { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args EdgeArgs<'args>
  ) -> flatbuffers::WIPOffset<Edge<'bldr>> {
    let mut builder = EdgeBuilder::new(_fbb);
    builder.add_destination_node_id(args.destination_node_id);
    builder.add_source_node_id(args.source_node_id);
    builder.add_id(args.id);
    if let Some(x) = args.travel_costs { builder.add_travel_costs(x); }
    builder.finish()
  }


  #[inline]
  pub fn id(&self) -> u64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u64>(Edge::VT_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn source_node_id(&self) -> u64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u64>(Edge::VT_SOURCE_NODE_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn destination_node_id(&self) -> u64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u64>(Edge::VT_DESTINATION_NODE_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn travel_costs(&self) -> Option<flatbuffers::Vector<'a, f32>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, f32>>>(Edge::VT_TRAVEL_COSTS, None)}
  }
}

impl flatbuffers::Verifiable for Edge<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<u64>("id", Self::VT_ID, false)?
     .visit_field::<u64>("source_node_id", Self::VT_SOURCE_NODE_ID, false)?
     .visit_field::<u64>("destination_node_id", Self::VT_DESTINATION_NODE_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, f32>>>("travel_costs", Self::VT_TRAVEL_COSTS, false)?
     .finish();
    Ok(())
  }
}
pub struct EdgeArgs<'a> {
    pub id: u64,
    pub source_node_id: u64,
    pub destination_node_id: u64,
    pub travel_costs: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, f32>>>,
}
impl<'a> Default for EdgeArgs<'a> {
  #[inline]
  fn default() -> Self {
    EdgeArgs {
      id: 0,
      source_node_id: 0,
      destination_node_id: 0,
      travel_costs: None,
    }
  }
}

pub struct EdgeBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> EdgeBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_id(&mut self, id: u64) {
    self.fbb_.push_slot::<u64>(Edge::VT_ID, id, 0);
  }
  #[inline]
  pub fn add_source_node_id(&mut self, source_node_id: u64) {
    self.fbb_.push_slot::<u64>(Edge::VT_SOURCE_NODE_ID, source_node_id, 0);
  }
  #[inline]
  pub fn add_destination_node_id(&mut self, destination_node_id: u64) {
    self.fbb_.push_slot::<u64>(Edge::VT_DESTINATION_NODE_ID, destination_node_id, 0);
  }
  #[inline]
  pub fn add_travel_costs(&mut self, travel_costs: flatbuffers::WIPOffset<flatbuffers::Vector<'b , f32>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Edge::VT_TRAVEL_COSTS, travel_costs);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> EdgeBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    EdgeBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Edge<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for Edge<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("Edge");
      ds.field("id", &self.id());
      ds.field("source_node_id", &self.source_node_id());
      ds.field("destination_node_id", &self.destination_node_id());
      ds.field("travel_costs", &self.travel_costs());
      ds.finish()
  }
}
}  // pub mod tobmapgraph

