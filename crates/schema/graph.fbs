namespace tobmapgraph;

// Travel modes for edge costs
enum TravelMode : byte {
  Car = 0,
  Bike = 1,
  Walk = 2,
  Transit = 3
}

enum RoadInteraction : byte {
    None = 0,
    Yield = 1,
    StopSign = 2,
    TrafficLight = 3,
}

struct Interactions {
    incoming:RoadInteraction;
    outgoing:RoadInteraction;
}

// A node represents a real-world intersection
table Node {
  cell_id:uint64;

  // related edges, with their interactions for 
  // incoming, outgoing pairs
  edges:[uint64];
  interactions:[Interactions];
}

// An edge represents a way (street, path, etc.) between two nodes
table Edge {
  cell_id:uint64;
  
  point_1_node_idx:uint64;
  point_2_node_idx:uint64;

  // Can you go from vertex_2 to vertex_1?
  backwards_allowed:bool;
  
  // Travel costs (time in seconds) for different travel modes
  // A negative value indicates that this mode is not allowed
  travel_costs:[float];
}

table GraphBlob {
    name:string;

    // https://www.youtube.com/watch?v=B7-_hb28Wmk
    edges:[Edge];

    nodes:[Node];
}
