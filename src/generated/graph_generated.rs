// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[allow(unused_imports, dead_code)]
pub mod tobmap {

  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};

#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_TRAVEL_MODE: i8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_TRAVEL_MODE: i8 = 3;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_TRAVEL_MODE: [TravelMode; 4] = [
  TravelMode::Car,
  TravelMode::Bike,
  TravelMode::Walk,
  TravelMode::Transit,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct TravelMode(pub i8);
#[allow(non_upper_case_globals)]
impl TravelMode {
  pub const Car: Self = Self(0);
  pub const Bike: Self = Self(1);
  pub const Walk: Self = Self(2);
  pub const Transit: Self = Self(3);

  pub const ENUM_MIN: i8 = 0;
  pub const ENUM_MAX: i8 = 3;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::Car,
    Self::Bike,
    Self::Walk,
    Self::Transit,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::Car => Some("Car"),
      Self::Bike => Some("Bike"),
      Self::Walk => Some("Walk"),
      Self::Transit => Some("Transit"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for TravelMode {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for TravelMode {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i8>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for TravelMode {
    type Output = TravelMode;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i8>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for TravelMode {
  type Scalar = i8;
  #[inline]
  fn to_little_endian(self) -> i8 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i8) -> Self {
    let b = i8::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for TravelMode {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for TravelMode {}
pub enum NodeOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct Node<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Node<'a> {
  type Inner = Node<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> Node<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_S2_CELL_ID: flatbuffers::VOffsetT = 6;
  pub const VT_LAT: flatbuffers::VOffsetT = 8;
  pub const VT_LNG: flatbuffers::VOffsetT = 10;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    Node { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args NodeArgs<'args>
  ) -> flatbuffers::WIPOffset<Node<'bldr>> {
    let mut builder = NodeBuilder::new(_fbb);
    builder.add_s2_cell_id(args.s2_cell_id);
    builder.add_lng(args.lng);
    builder.add_lat(args.lat);
    if let Some(x) = args.id { builder.add_id(x); }
    builder.finish()
  }


  #[inline]
  pub fn id(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Node::VT_ID, None)}
  }
  #[inline]
  pub fn s2_cell_id(&self) -> u64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u64>(Node::VT_S2_CELL_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn lat(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(Node::VT_LAT, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn lng(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(Node::VT_LNG, Some(0.0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for Node<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("id", Self::VT_ID, false)?
     .visit_field::<u64>("s2_cell_id", Self::VT_S2_CELL_ID, false)?
     .visit_field::<f32>("lat", Self::VT_LAT, false)?
     .visit_field::<f32>("lng", Self::VT_LNG, false)?
     .finish();
    Ok(())
  }
}
pub struct NodeArgs<'a> {
    pub id: Option<flatbuffers::WIPOffset<&'a str>>,
    pub s2_cell_id: u64,
    pub lat: f32,
    pub lng: f32,
}
impl<'a> Default for NodeArgs<'a> {
  #[inline]
  fn default() -> Self {
    NodeArgs {
      id: None,
      s2_cell_id: 0,
      lat: 0.0,
      lng: 0.0,
    }
  }
}

pub struct NodeBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> NodeBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_id(&mut self, id: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Node::VT_ID, id);
  }
  #[inline]
  pub fn add_s2_cell_id(&mut self, s2_cell_id: u64) {
    self.fbb_.push_slot::<u64>(Node::VT_S2_CELL_ID, s2_cell_id, 0);
  }
  #[inline]
  pub fn add_lat(&mut self, lat: f32) {
    self.fbb_.push_slot::<f32>(Node::VT_LAT, lat, 0.0);
  }
  #[inline]
  pub fn add_lng(&mut self, lng: f32) {
    self.fbb_.push_slot::<f32>(Node::VT_LNG, lng, 0.0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> NodeBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    NodeBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Node<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for Node<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("Node");
      ds.field("id", &self.id());
      ds.field("s2_cell_id", &self.s2_cell_id());
      ds.field("lat", &self.lat());
      ds.field("lng", &self.lng());
      ds.finish()
  }
}
pub enum EdgeOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct Edge<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Edge<'a> {
  type Inner = Edge<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> Edge<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_SOURCE_NODE_ID: flatbuffers::VOffsetT = 6;
  pub const VT_DESTINATION_NODE_ID: flatbuffers::VOffsetT = 8;
  pub const VT_NAME: flatbuffers::VOffsetT = 10;
  pub const VT_OSM_WAY_ID: flatbuffers::VOffsetT = 12;
  pub const VT_TRAVEL_COSTS: flatbuffers::VOffsetT = 14;
  pub const VT_GEOMETRY_LATS: flatbuffers::VOffsetT = 16;
  pub const VT_GEOMETRY_LNGS: flatbuffers::VOffsetT = 18;
  pub const VT_TAGS: flatbuffers::VOffsetT = 20;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    Edge { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args EdgeArgs<'args>
  ) -> flatbuffers::WIPOffset<Edge<'bldr>> {
    let mut builder = EdgeBuilder::new(_fbb);
    builder.add_osm_way_id(args.osm_way_id);
    if let Some(x) = args.tags { builder.add_tags(x); }
    if let Some(x) = args.geometry_lngs { builder.add_geometry_lngs(x); }
    if let Some(x) = args.geometry_lats { builder.add_geometry_lats(x); }
    if let Some(x) = args.travel_costs { builder.add_travel_costs(x); }
    if let Some(x) = args.name { builder.add_name(x); }
    if let Some(x) = args.destination_node_id { builder.add_destination_node_id(x); }
    if let Some(x) = args.source_node_id { builder.add_source_node_id(x); }
    if let Some(x) = args.id { builder.add_id(x); }
    builder.finish()
  }


  #[inline]
  pub fn id(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Edge::VT_ID, None)}
  }
  #[inline]
  pub fn source_node_id(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Edge::VT_SOURCE_NODE_ID, None)}
  }
  #[inline]
  pub fn destination_node_id(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Edge::VT_DESTINATION_NODE_ID, None)}
  }
  #[inline]
  pub fn name(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Edge::VT_NAME, None)}
  }
  #[inline]
  pub fn osm_way_id(&self) -> u64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u64>(Edge::VT_OSM_WAY_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn travel_costs(&self) -> Option<flatbuffers::Vector<'a, f32>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, f32>>>(Edge::VT_TRAVEL_COSTS, None)}
  }
  #[inline]
  pub fn geometry_lats(&self) -> Option<flatbuffers::Vector<'a, f32>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, f32>>>(Edge::VT_GEOMETRY_LATS, None)}
  }
  #[inline]
  pub fn geometry_lngs(&self) -> Option<flatbuffers::Vector<'a, f32>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, f32>>>(Edge::VT_GEOMETRY_LNGS, None)}
  }
  #[inline]
  pub fn tags(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<KeyValue<'a>>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<KeyValue>>>>(Edge::VT_TAGS, None)}
  }
}

impl flatbuffers::Verifiable for Edge<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("id", Self::VT_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("source_node_id", Self::VT_SOURCE_NODE_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("destination_node_id", Self::VT_DESTINATION_NODE_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("name", Self::VT_NAME, false)?
     .visit_field::<u64>("osm_way_id", Self::VT_OSM_WAY_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, f32>>>("travel_costs", Self::VT_TRAVEL_COSTS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, f32>>>("geometry_lats", Self::VT_GEOMETRY_LATS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, f32>>>("geometry_lngs", Self::VT_GEOMETRY_LNGS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<KeyValue>>>>("tags", Self::VT_TAGS, false)?
     .finish();
    Ok(())
  }
}
pub struct EdgeArgs<'a> {
    pub id: Option<flatbuffers::WIPOffset<&'a str>>,
    pub source_node_id: Option<flatbuffers::WIPOffset<&'a str>>,
    pub destination_node_id: Option<flatbuffers::WIPOffset<&'a str>>,
    pub name: Option<flatbuffers::WIPOffset<&'a str>>,
    pub osm_way_id: u64,
    pub travel_costs: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, f32>>>,
    pub geometry_lats: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, f32>>>,
    pub geometry_lngs: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, f32>>>,
    pub tags: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<KeyValue<'a>>>>>,
}
impl<'a> Default for EdgeArgs<'a> {
  #[inline]
  fn default() -> Self {
    EdgeArgs {
      id: None,
      source_node_id: None,
      destination_node_id: None,
      name: None,
      osm_way_id: 0,
      travel_costs: None,
      geometry_lats: None,
      geometry_lngs: None,
      tags: None,
    }
  }
}

pub struct EdgeBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> EdgeBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_id(&mut self, id: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Edge::VT_ID, id);
  }
  #[inline]
  pub fn add_source_node_id(&mut self, source_node_id: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Edge::VT_SOURCE_NODE_ID, source_node_id);
  }
  #[inline]
  pub fn add_destination_node_id(&mut self, destination_node_id: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Edge::VT_DESTINATION_NODE_ID, destination_node_id);
  }
  #[inline]
  pub fn add_name(&mut self, name: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Edge::VT_NAME, name);
  }
  #[inline]
  pub fn add_osm_way_id(&mut self, osm_way_id: u64) {
    self.fbb_.push_slot::<u64>(Edge::VT_OSM_WAY_ID, osm_way_id, 0);
  }
  #[inline]
  pub fn add_travel_costs(&mut self, travel_costs: flatbuffers::WIPOffset<flatbuffers::Vector<'b , f32>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Edge::VT_TRAVEL_COSTS, travel_costs);
  }
  #[inline]
  pub fn add_geometry_lats(&mut self, geometry_lats: flatbuffers::WIPOffset<flatbuffers::Vector<'b , f32>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Edge::VT_GEOMETRY_LATS, geometry_lats);
  }
  #[inline]
  pub fn add_geometry_lngs(&mut self, geometry_lngs: flatbuffers::WIPOffset<flatbuffers::Vector<'b , f32>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Edge::VT_GEOMETRY_LNGS, geometry_lngs);
  }
  #[inline]
  pub fn add_tags(&mut self, tags: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<KeyValue<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Edge::VT_TAGS, tags);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> EdgeBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    EdgeBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Edge<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for Edge<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("Edge");
      ds.field("id", &self.id());
      ds.field("source_node_id", &self.source_node_id());
      ds.field("destination_node_id", &self.destination_node_id());
      ds.field("name", &self.name());
      ds.field("osm_way_id", &self.osm_way_id());
      ds.field("travel_costs", &self.travel_costs());
      ds.field("geometry_lats", &self.geometry_lats());
      ds.field("geometry_lngs", &self.geometry_lngs());
      ds.field("tags", &self.tags());
      ds.finish()
  }
}
pub enum KeyValueOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct KeyValue<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for KeyValue<'a> {
  type Inner = KeyValue<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> KeyValue<'a> {
  pub const VT_KEY: flatbuffers::VOffsetT = 4;
  pub const VT_VALUE: flatbuffers::VOffsetT = 6;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    KeyValue { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args KeyValueArgs<'args>
  ) -> flatbuffers::WIPOffset<KeyValue<'bldr>> {
    let mut builder = KeyValueBuilder::new(_fbb);
    if let Some(x) = args.value { builder.add_value(x); }
    if let Some(x) = args.key { builder.add_key(x); }
    builder.finish()
  }


  #[inline]
  pub fn key(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(KeyValue::VT_KEY, None)}
  }
  #[inline]
  pub fn value(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(KeyValue::VT_VALUE, None)}
  }
}

impl flatbuffers::Verifiable for KeyValue<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("key", Self::VT_KEY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("value", Self::VT_VALUE, false)?
     .finish();
    Ok(())
  }
}
pub struct KeyValueArgs<'a> {
    pub key: Option<flatbuffers::WIPOffset<&'a str>>,
    pub value: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for KeyValueArgs<'a> {
  #[inline]
  fn default() -> Self {
    KeyValueArgs {
      key: None,
      value: None,
    }
  }
}

pub struct KeyValueBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> KeyValueBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_key(&mut self, key: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(KeyValue::VT_KEY, key);
  }
  #[inline]
  pub fn add_value(&mut self, value: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(KeyValue::VT_VALUE, value);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> KeyValueBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    KeyValueBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<KeyValue<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for KeyValue<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("KeyValue");
      ds.field("key", &self.key());
      ds.field("value", &self.value());
      ds.finish()
  }
}
pub enum CellOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct Cell<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Cell<'a> {
  type Inner = Cell<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> Cell<'a> {
  pub const VT_S2_CELL_ID: flatbuffers::VOffsetT = 4;
  pub const VT_NODES: flatbuffers::VOffsetT = 6;
  pub const VT_EDGES: flatbuffers::VOffsetT = 8;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    Cell { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args CellArgs<'args>
  ) -> flatbuffers::WIPOffset<Cell<'bldr>> {
    let mut builder = CellBuilder::new(_fbb);
    builder.add_s2_cell_id(args.s2_cell_id);
    if let Some(x) = args.edges { builder.add_edges(x); }
    if let Some(x) = args.nodes { builder.add_nodes(x); }
    builder.finish()
  }


  #[inline]
  pub fn s2_cell_id(&self) -> u64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u64>(Cell::VT_S2_CELL_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn nodes(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Node<'a>>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Node>>>>(Cell::VT_NODES, None)}
  }
  #[inline]
  pub fn edges(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Edge<'a>>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Edge>>>>(Cell::VT_EDGES, None)}
  }
}

impl flatbuffers::Verifiable for Cell<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<u64>("s2_cell_id", Self::VT_S2_CELL_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<Node>>>>("nodes", Self::VT_NODES, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<Edge>>>>("edges", Self::VT_EDGES, false)?
     .finish();
    Ok(())
  }
}
pub struct CellArgs<'a> {
    pub s2_cell_id: u64,
    pub nodes: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Node<'a>>>>>,
    pub edges: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Edge<'a>>>>>,
}
impl<'a> Default for CellArgs<'a> {
  #[inline]
  fn default() -> Self {
    CellArgs {
      s2_cell_id: 0,
      nodes: None,
      edges: None,
    }
  }
}

pub struct CellBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> CellBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_s2_cell_id(&mut self, s2_cell_id: u64) {
    self.fbb_.push_slot::<u64>(Cell::VT_S2_CELL_ID, s2_cell_id, 0);
  }
  #[inline]
  pub fn add_nodes(&mut self, nodes: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<Node<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Cell::VT_NODES, nodes);
  }
  #[inline]
  pub fn add_edges(&mut self, edges: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<Edge<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Cell::VT_EDGES, edges);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> CellBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    CellBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Cell<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for Cell<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("Cell");
      ds.field("s2_cell_id", &self.s2_cell_id());
      ds.field("nodes", &self.nodes());
      ds.field("edges", &self.edges());
      ds.finish()
  }
}
pub enum MapDataOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct MapData<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for MapData<'a> {
  type Inner = MapData<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> MapData<'a> {
  pub const VT_VERSION: flatbuffers::VOffsetT = 4;
  pub const VT_OSM_DATA_DATE: flatbuffers::VOffsetT = 6;
  pub const VT_GENERATION_DATE: flatbuffers::VOffsetT = 8;
  pub const VT_CELLS: flatbuffers::VOffsetT = 10;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    MapData { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args MapDataArgs<'args>
  ) -> flatbuffers::WIPOffset<MapData<'bldr>> {
    let mut builder = MapDataBuilder::new(_fbb);
    if let Some(x) = args.cells { builder.add_cells(x); }
    if let Some(x) = args.generation_date { builder.add_generation_date(x); }
    if let Some(x) = args.osm_data_date { builder.add_osm_data_date(x); }
    if let Some(x) = args.version { builder.add_version(x); }
    builder.finish()
  }


  #[inline]
  pub fn version(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MapData::VT_VERSION, None)}
  }
  #[inline]
  pub fn osm_data_date(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MapData::VT_OSM_DATA_DATE, None)}
  }
  #[inline]
  pub fn generation_date(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MapData::VT_GENERATION_DATE, None)}
  }
  #[inline]
  pub fn cells(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Cell<'a>>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Cell>>>>(MapData::VT_CELLS, None)}
  }
}

impl flatbuffers::Verifiable for MapData<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("version", Self::VT_VERSION, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("osm_data_date", Self::VT_OSM_DATA_DATE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("generation_date", Self::VT_GENERATION_DATE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<Cell>>>>("cells", Self::VT_CELLS, false)?
     .finish();
    Ok(())
  }
}
pub struct MapDataArgs<'a> {
    pub version: Option<flatbuffers::WIPOffset<&'a str>>,
    pub osm_data_date: Option<flatbuffers::WIPOffset<&'a str>>,
    pub generation_date: Option<flatbuffers::WIPOffset<&'a str>>,
    pub cells: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Cell<'a>>>>>,
}
impl<'a> Default for MapDataArgs<'a> {
  #[inline]
  fn default() -> Self {
    MapDataArgs {
      version: None,
      osm_data_date: None,
      generation_date: None,
      cells: None,
    }
  }
}

pub struct MapDataBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> MapDataBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_version(&mut self, version: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MapData::VT_VERSION, version);
  }
  #[inline]
  pub fn add_osm_data_date(&mut self, osm_data_date: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MapData::VT_OSM_DATA_DATE, osm_data_date);
  }
  #[inline]
  pub fn add_generation_date(&mut self, generation_date: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MapData::VT_GENERATION_DATE, generation_date);
  }
  #[inline]
  pub fn add_cells(&mut self, cells: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<Cell<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MapData::VT_CELLS, cells);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> MapDataBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    MapDataBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<MapData<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for MapData<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("MapData");
      ds.field("version", &self.version());
      ds.field("osm_data_date", &self.osm_data_date());
      ds.field("generation_date", &self.generation_date());
      ds.field("cells", &self.cells());
      ds.finish()
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `MapData`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_map_data_unchecked`.
pub fn root_as_map_data(buf: &[u8]) -> Result<MapData, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<MapData>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `MapData` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_map_data_unchecked`.
pub fn size_prefixed_root_as_map_data(buf: &[u8]) -> Result<MapData, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<MapData>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `MapData` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_map_data_unchecked`.
pub fn root_as_map_data_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<MapData<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<MapData<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `MapData` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_map_data_unchecked`.
pub fn size_prefixed_root_as_map_data_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<MapData<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<MapData<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a MapData and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `MapData`.
pub unsafe fn root_as_map_data_unchecked(buf: &[u8]) -> MapData {
  flatbuffers::root_unchecked::<MapData>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed MapData and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `MapData`.
pub unsafe fn size_prefixed_root_as_map_data_unchecked(buf: &[u8]) -> MapData {
  flatbuffers::size_prefixed_root_unchecked::<MapData>(buf)
}
#[inline]
pub fn finish_map_data_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<MapData<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_map_data_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<MapData<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
}  // pub mod tobmap

